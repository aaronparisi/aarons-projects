{"version":3,"file":"react-stagger.umd.js","sources":["../src/StaggerTiming.js","../src/index.js"],"sourcesContent":["const STAGGER_GROUP_WINDOW = 100\n\nclass StaggerTiming {\n  lastStagger = 0\n  currentDelay = 0\n  lastDelay = 0\n\n  getDelay(newDelay, commitDelay) {\n    const now = Date.now()\n    newDelay = +newDelay\n    if (now - this.lastStagger > STAGGER_GROUP_WINDOW) {\n      this.lastStagger = now\n      this.currentDelay = 0\n      this.lastDelay = 0\n    }\n\n    if (this.currentDelay > 0 || this.lastDelay > 0) {\n      this.lastDelay = Math.max(this.lastDelay, newDelay)\n    }\n\n    const delay = this.currentDelay + this.lastDelay\n    if (commitDelay) {\n      this.currentDelay += this.lastDelay\n      this.lastDelay = newDelay\n    }\n    return delay\n  }\n}\n\nexport default StaggerTiming\n","import {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport StaggerTiming from './StaggerTiming'\n\nconst globalTiming = new StaggerTiming()\n\nclass Stagger extends Component {\n  static childContextTypes = {\n    stagger: PropTypes.object.isRequired,\n  }\n\n  static contextTypes = {\n    stagger: PropTypes.object,\n  }\n\n  static defaultProps = {\n    delay: 100,\n    in: true,\n    appear: true,\n  }\n\n  static propTypes = {\n    timing: PropTypes.instanceOf(StaggerTiming),\n    delay: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.arrayOf(PropTypes.number),\n    ]),\n    in: PropTypes.bool,\n    appear: PropTypes.bool,\n    children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  }\n\n  staggerContext = {\n    subscribe: this.subscribe.bind(this),\n    value: false,\n    timing: this.props.timing || this.context.timing || globalTiming,\n  }\n  selfValue = this.props.in\n  subscribers = []\n  unsubscribe = null\n  state = {\n    value: false,\n    delay: 0,\n  }\n\n  componentWillMount() {\n    if (this.context.stagger) {\n      this.unsubscribe = this.context.stagger.subscribe(() =>\n        this.checkUpdate(),\n      )\n    }\n    if (!this.props.appear) {\n      this.checkUpdate(true)\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.appear) {\n      this.checkUpdate()\n    }\n  }\n\n  componentWillReceiveProps(newProps) {\n    this.selfValue = newProps.in\n    this.checkUpdate()\n  }\n\n  componentWillUnmount() {\n    if (this.unsubscribe) {\n      this.unsubscribe()\n    }\n  }\n\n  checkUpdate(forceInstant) {\n    // Only stagger if self and all parents are active.\n    const parentValue = this.context.stagger ? this.context.stagger.value : true\n    const value = this.selfValue && parentValue\n\n    // Only continue if the value has changed.\n    if (value === this.staggerContext.value) {\n      return\n    }\n\n    this.staggerContext.value = value\n\n    const delay = this.calculateDelay(value, forceInstant)\n    this.setState({\n      value,\n      delay,\n    })\n  }\n\n  calculateDelay(value, forceInstant) {\n    // Get delay for self. Note, the actual delay is max of all stagger\n    // delays since last leaf stagger.\n    // stagger(300)    - 0\n    //   stagger(100)  - 0\n    //   stagger(100)  - 100\n    //   stagger(100)  - 200\n    // stagger(200)    - 400\n    //   stagger(100)  - 400\n    // stagger(500)    - 900\n\n    if (forceInstant) {\n      return 0\n    }\n\n    const timing = this.staggerContext.timing\n    const isLeaf = !this.subscribers.length\n    const [beforeDelay, afterDelay] = this.getOwnDelay()\n\n    // Add delay for self and get total delay since last leaf.\n    const totalDelay = value ? timing.getDelay(beforeDelay, isLeaf) : 0\n\n    if (!isLeaf) {\n      // Notify children of change.\n      this.subscribers.forEach(subscriber => {\n        subscriber()\n      })\n    }\n\n    // Add delay after children.\n    if (value) {\n      timing.getDelay(afterDelay, false)\n    }\n\n    return totalDelay\n  }\n\n  getOwnDelay() {\n    const {delay} = this.props\n    return Array.isArray(delay) ? delay : [delay, delay]\n  }\n\n  getChildContext() {\n    return {\n      stagger: this.staggerContext,\n    }\n  }\n\n  subscribe(handler) {\n    this.subscribers.push(handler)\n    return () => {\n      this.subscribers = this.subscribers.filter(h => h !== handler)\n    }\n  }\n\n  render() {\n    const {children} = this.props\n    if (typeof children === 'function') {\n      return children(this.state)\n    }\n    return children || null\n  }\n}\n\nexport default Stagger\n"],"names":["STAGGER_GROUP_WINDOW","StaggerTiming","lastStagger","currentDelay","lastDelay","getDelay","newDelay","commitDelay","now","Date","Math","max","delay","globalTiming","Stagger","staggerContext","subscribe","bind","props","timing","context","selfValue","in","subscribers","unsubscribe","state","componentWillMount","stagger","checkUpdate","appear","componentDidMount","componentWillReceiveProps","newProps","componentWillUnmount","forceInstant","parentValue","value","calculateDelay","setState","isLeaf","length","getOwnDelay","beforeDelay","afterDelay","totalDelay","forEach","Array","isArray","getChildContext","handler","push","filter","h","render","children","Component","childContextTypes","PropTypes","object","isRequired","contextTypes","defaultProps","propTypes","instanceOf","oneOfType","number","arrayOf","bool","node","func"],"mappings":"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"}